/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        enabled: { ${params.publish_intermediate_data}},
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    
    withName: MERGE_FOLDERS {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: { ${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: STAR_GENOMEGENERATE {
        ext.args = [
            "--sjdbOverhang ${params.spliceJunctionOverhang}"
        ].join(" ")
        
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    withName: TAR_STAR_RESULTS {
        ext.args = [
            "--dereference"
        ].join(" ")
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    withName: CAT_GENE_LEVEL_GENCODE_PATCHED_ERCC_GTF {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: COLLAPSE_GTF_ANNOTATIONS_ON_GENE_LEVEL {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: SAMTOOLS_FAIDX {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    withName: PICARD_CREATESEQUENCEDICTIONARY {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: RSEM_PREPAREREFERENCE {
        
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: TAR_RSEM_RESULTS {
       ext.args = [
            "--dereference"
        ].join(" ")
        
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    withName: CAT_GENOME_PATCHED_ERCC_FASTA {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ],
        [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: CAT_GENCODE_PATCHED_ERCC_GTF {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: GUNZIP_GENCODE {
        publishDir =  [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: PATCH_ERCC_SPIKES_FASTA {
        publishDir = [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: { ${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: PATCH_ERCC_SPIKES_GTF {
        publishDir = [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: { ${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }
    
    withName: REMOVE_ALT_HLA_DECOY_FROM_GENOME_FASTA {
        publishDir = [
        [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            enabled: {${params.publish_intermediate_data}},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
